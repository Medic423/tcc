// Hospital Database Schema
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/hospital"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_HOSPITAL")
}

model HospitalUser {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  hospitalName String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  transportRequests TransportRequest[]

  @@map("hospital_users")
}

model HealthcareUser {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  facilityName String
  facilityType String   // HOSPITAL, CLINIC, URGENT_CARE, etc.
  isActive     Boolean  @default(true)
  userType     String   @default("HEALTHCARE") // HEALTHCARE, ADMIN
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  transportRequests TransportRequest[] @relation("HealthcareTransportRequests")

  @@map("healthcare_users")
}

model Facility {
  id          String   @id @default(cuid())
  name        String
  type        String
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  coordinates Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  originTransportRequests      TransportRequest[] @relation("OriginFacility")
  destinationTransportRequests TransportRequest[] @relation("DestinationFacility")

  @@map("facilities")
}

model TransportRequest {
  id                    String    @id @default(cuid())
  patientId             String
  originFacilityId      String?
  destinationFacilityId String?
  transportLevel        String
  priority              String
  status                String    @default("PENDING")
  specialRequirements   String?
  requestTimestamp      DateTime  @default(now())
  acceptedTimestamp     DateTime?
  pickupTimestamp       DateTime?
  completionTimestamp   DateTime?
  assignedAgencyId      String?
  assignedUnitId        String?
  createdById           String?
  healthcareCreatedById String?
  readyStart            DateTime?
  readyEnd              DateTime?
  isolation             Boolean   @default(false)
  bariatric             Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  originFacility        Facility?     @relation("OriginFacility", fields: [originFacilityId], references: [id])
  destinationFacility   Facility?     @relation("DestinationFacility", fields: [destinationFacilityId], references: [id])
  createdBy             HospitalUser? @relation(fields: [createdById], references: [id])
  createdByHealthcare   HealthcareUser? @relation("HealthcareTransportRequests", fields: [healthcareCreatedById], references: [id])

  @@map("transport_requests")
}