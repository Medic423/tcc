generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CenterUser {
  id                 String   @id @default(cuid())
  email              String   @unique
  password           String
  name               String
  userType           String
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  phone              String?
  emailNotifications Boolean? @default(true)
  smsNotifications   Boolean? @default(false)

  @@map("center_users")
}

model HealthcareUser {
  id                      String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  email                   String   @unique
  password                String
  name                    String
  facilityName            String
  facilityType            String
  isActive                Boolean  @default(true)
  userType                String   @default("HEALTHCARE")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @default(now()) @updatedAt
  manageMultipleLocations Boolean? @default(false)

  @@index([email])
  @@index([isActive], map: "healthcare_users_is_active_idx")
  @@map("healthcare_users")
}

model HealthcareLocation {
  id               String   @id @default(cuid())
  healthcareUserId String
  locationName     String
  address          String
  city             String
  state            String
  zipCode          String
  phone            String?
  facilityType     String
  isActive         Boolean  @default(true)
  isPrimary        Boolean  @default(false)
  latitude         Float?
  longitude        Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@index([healthcareUserId])
  @@index([isActive])
  @@map("healthcare_locations")
}

model Hospital {
  id             String    @id @default(cuid())
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  type           String
  capabilities   String[]
  region         String
  coordinates    Json?
  latitude       Float?
  longitude      Float?
  operatingHours String?
  isActive       Boolean   @default(true)
  requiresReview Boolean   @default(false)
  approvedAt     DateTime?
  approvedBy     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("hospitals")
}

model EMSUser {
  id         String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  email      String   @unique
  password   String
  name       String
  agencyName String
  agencyType String
  isActive   Boolean  @default(true)
  userType   String   @default("EMS")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  agencyId   String?

  @@index([email])
  @@index([isActive], map: "ems_users_is_active_idx")
  @@map("ems_users")
}

model EMSAgency {
  id                   String    @id @default(cuid())
  name                 String
  contactName          String
  phone                String
  email                String
  address              String
  city                 String
  state                String
  zipCode              String
  serviceArea          String[]
  operatingHours       Json?
  capabilities         String[]
  pricingStructure     Json?
  isActive             Boolean   @default(true)
  status               String    @default("ACTIVE")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  acceptsNotifications Boolean   @default(true)
  approvedAt           DateTime?
  approvedBy           String?
  availableUnits       Int       @default(0)
  lastUpdated          DateTime  @default(now())
  latitude             Float?
  longitude            Float?
  notificationMethods  String[]
  requiresReview       Boolean   @default(false)
  serviceRadius        Int?
  totalUnits           Int       @default(0)

  @@map("ems_agencies")
}

model Trip {
  id                   String    @id @default(cuid())
  tripNumber           String    @unique
  patientId            String
  patientWeight        String?
  specialNeeds         String?
  fromLocation         String
  toLocation           String
  scheduledTime        DateTime
  transportLevel       String
  urgencyLevel         String
  diagnosis            String?
  mobilityLevel        String?
  oxygenRequired       Boolean   @default(false)
  monitoringRequired   Boolean   @default(false)
  generateQRCode       Boolean   @default(false)
  qrCodeData           String?
  selectedAgencies     String[]
  notificationRadius   Int?
  transferRequestTime  DateTime?
  transferAcceptedTime DateTime?
  emsArrivalTime       DateTime?
  emsDepartureTime     DateTime?
  actualStartTime      DateTime?
  actualEndTime        DateTime?
  status               String
  priority             String
  notes                String?
  assignedTo           String?
  assignedAgencyId     String?
  assignedUnitId       String?
  acceptedTimestamp    DateTime?
  pickupTimestamp      DateTime?
  completionTimestamp  DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("trips")
}

model AgencyResponse {
  id                String    @id @default(cuid())
  tripId            String
  agencyId          String
  response          String
  responseTimestamp DateTime  @default(now())
  responseNotes     String?
  estimatedArrival  DateTime?
  isSelected        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  @@map("agency_responses")
}

model SystemAnalytics {
  id          String   @id @default(cuid())
  metricName  String
  metricValue Json
  timestamp   DateTime @default(now())
  userId      String?

  @@map("system_analytics")
}

model TripCostBreakdown {
  id                         String   @id @default(cuid())
  tripId                     String
  baseRevenue                Decimal  @db.Decimal(10, 2)
  mileageRevenue             Decimal  @db.Decimal(10, 2)
  priorityRevenue            Decimal  @db.Decimal(10, 2)
  specialRequirementsRevenue Decimal  @db.Decimal(10, 2)
  insuranceAdjustment        Decimal  @db.Decimal(10, 2)
  totalRevenue               Decimal  @db.Decimal(10, 2)
  crewLaborCost              Decimal  @db.Decimal(10, 2)
  vehicleCost                Decimal  @db.Decimal(10, 2)
  fuelCost                   Decimal  @db.Decimal(10, 2)
  maintenanceCost            Decimal  @db.Decimal(10, 2)
  overheadCost               Decimal  @db.Decimal(10, 2)
  totalCost                  Decimal  @db.Decimal(10, 2)
  grossProfit                Decimal  @db.Decimal(10, 2)
  profitMargin               Decimal  @db.Decimal(5, 2)
  revenuePerMile             Decimal  @db.Decimal(8, 2)
  costPerMile                Decimal  @db.Decimal(8, 2)
  loadedMileRatio            Decimal  @db.Decimal(3, 2)
  deadheadMileRatio          Decimal  @db.Decimal(3, 2)
  utilizationRate            Decimal  @db.Decimal(3, 2)
  tripDistance               Decimal  @db.Decimal(6, 2)
  loadedMiles                Decimal  @db.Decimal(6, 2)
  deadheadMiles              Decimal  @db.Decimal(6, 2)
  tripDurationHours          Decimal  @db.Decimal(4, 2)
  transportLevel             String
  priorityLevel              String
  costCenterId               String?
  costCenterName             String?
  calculatedAt               DateTime @default(now())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@map("trip_cost_breakdowns")
}

model CostCenter {
  id               String   @id @default(cuid())
  name             String
  description      String?
  code             String   @unique
  overheadRate     Decimal  @default(0.0) @db.Decimal(5, 2)
  fixedCosts       Decimal  @default(0.0) @db.Decimal(10, 2)
  variableCosts    Decimal  @default(0.0) @db.Decimal(10, 2)
  allocationMethod String   @default("TRIP_COUNT")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("cost_centers")
}

model pickup_locations {
  id           String   @id
  hospitalId   String
  name         String
  description  String?
  contactPhone String?
  contactEmail String?
  floor        String?
  room         String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model route_optimization_settings {
  id                           String   @id
  agencyId                     String?
  deadheadMileWeight           Decimal  @default(1.0) @db.Decimal(5, 2)
  waitTimeWeight               Decimal  @default(1.0) @db.Decimal(5, 2)
  backhaulBonusWeight          Decimal  @default(1.0) @db.Decimal(5, 2)
  overtimeRiskWeight           Decimal  @default(1.0) @db.Decimal(5, 2)
  revenueWeight                Decimal  @default(1.0) @db.Decimal(5, 2)
  maxDeadheadMiles             Decimal  @default(50.0) @db.Decimal(6, 2)
  maxWaitTimeMinutes           Int      @default(30)
  maxOvertimeHours             Decimal  @default(4.0) @db.Decimal(4, 2)
  maxResponseTimeMinutes       Int      @default(15)
  maxServiceDistance           Decimal  @default(100.0) @db.Decimal(6, 2)
  backhaulTimeWindow           Int      @default(60)
  backhaulDistanceLimit        Decimal  @default(25.0) @db.Decimal(6, 2)
  backhaulRevenueBonus         Decimal  @default(50.0) @db.Decimal(8, 2)
  enableBackhaulOptimization   Boolean  @default(true)
  targetLoadedMileRatio        Decimal  @default(0.75) @db.Decimal(3, 2)
  targetRevenuePerHour         Decimal  @default(200.0) @db.Decimal(8, 2)
  targetResponseTime           Int      @default(12)
  targetEfficiency             Decimal  @default(0.85) @db.Decimal(3, 2)
  optimizationAlgorithm        String   @default("HYBRID")
  maxOptimizationTime          Int      @default(30)
  enableRealTimeOptimization   Boolean  @default(true)
  crewAvailabilityWeight       Decimal  @default(1.0) @db.Decimal(5, 2)
  equipmentCompatibilityWeight Decimal  @default(1.0) @db.Decimal(5, 2)
  patientPriorityWeight        Decimal  @default(1.0) @db.Decimal(5, 2)
  isActive                     Boolean  @default(true)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime

  @@index([agencyId])
  @@index([isActive])
}

model Unit {
  id              String    @id @default(cuid())
  agencyId        String
  unitNumber      String
  type            String
  status          String    @default("AVAILABLE")
  currentStatus   String    @default("AVAILABLE")
  currentLocation String?
  capabilities    String[]  @default([])
  crewSize        Int       @default(2)
  equipment       String[]  @default([])
  location        Json?
  latitude        Float?
  longitude       Float?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  @@unique([agencyId, unitNumber])
  @@map("units")
}

model NotificationPreference {
  id               String   @id @default(cuid())
  userId           String
  notificationType String
  emailEnabled     Boolean  @default(true)
  smsEnabled       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([userId, notificationType])
  @@map("notification_preferences")
}

model NotificationLog {
  id               String    @id @default(cuid())
  userId           String
  notificationType String
  channel          String
  status           String
  sentAt           DateTime  @default(now())
  deliveredAt      DateTime?
  errorMessage     String?

  @@map("notification_logs")
}

model DropdownOption {
  id         String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  category   String
  value      String
  isActive   Boolean?         @default(true)
  createdAt  DateTime?        @default(now())
  updatedAt  DateTime?        @default(now()) @updatedAt
  defaultFor CategoryDefault?

  @@unique([category, value])
  @@map("dropdown_options")
}

model CategoryDefault {
  id        String         @id @default(cuid())
  category  String         @unique
  optionId  String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  option    DropdownOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("dropdown_category_defaults")
}

model TransportRequest {
  id                      String    @id @default(cuid())
  tripNumber              String?   @unique
  patientId               String
  patientWeight           String?
  specialNeeds            String?
  originFacilityId        String?
  destinationFacilityId   String?
  fromLocation            String?
  toLocation              String?
  fromLocationId          String?
  isMultiLocationFacility Boolean   @default(false)
  scheduledTime           DateTime?
  transportLevel          String
  urgencyLevel            String?
  priority                String
  status                  String    @default("PENDING")
  specialRequirements     String?
  diagnosis               String?
  mobilityLevel           String?
  oxygenRequired          Boolean   @default(false)
  monitoringRequired      Boolean   @default(false)
  generateQRCode          Boolean   @default(false)
  qrCodeData              String?
  selectedAgencies        String[]  @default([])
  notificationRadius      Int?
  requestTimestamp        DateTime  @default(now())
  acceptedTimestamp       DateTime?
  pickupTimestamp         DateTime?
  arrivalTimestamp        DateTime?
  departureTimestamp      DateTime?
  completionTimestamp     DateTime?
  pickupLocationId        String?
  assignedAgencyId        String?
  assignedUnitId          String?
  createdById             String?
  healthcareCreatedById   String?
  isolation               Boolean   @default(false)
  bariatric               Boolean   @default(false)
  notes                   String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt

  @@index([fromLocationId])
  @@index([isMultiLocationFacility])
  @@map("transport_requests")
}

model Facility {
  id             String    @id @default(cuid())
  name           String
  type           String
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  region         String
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  capabilities   String[]  @default([])
  coordinates    Json?
  latitude       Float?
  longitude      Float?
  operatingHours String?
  requiresReview Boolean?  @default(false)
  approvedAt     DateTime?
  approvedBy     String?

  @@map("facilities")
}

model agencies {
  id          String   @id
  name        String
  type        String
  region      String
  contactInfo Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}
