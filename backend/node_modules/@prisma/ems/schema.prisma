// EMS Database Schema
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/ems"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_EMS")
}

model EMSUser {
  id                 String   @id @default(cuid())
  email              String   @unique
  password           String
  name               String
  phone              String?
  agencyName         String
  agencyId           String? // Reference to EMSAgency
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  isActive           Boolean  @default(true)
  userType           String   @default("EMS") // EMS, ADMIN
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  agency            EMSAgency?         @relation(fields: [agencyId], references: [id])
  transportRequests TransportRequest[]

  @@map("ems_users")
}

model EMSAgency {
  id               String   @id @default(cuid())
  name             String
  contactName      String
  phone            String
  email            String
  address          String
  city             String
  state            String
  zipCode          String
  serviceArea      String[]
  operatingHours   Json?
  capabilities     String[]
  pricingStructure Json?
  isActive         Boolean  @default(true)
  status           String   @default("ACTIVE")
  addedBy          String?
  addedAt          DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  users EMSUser[]
  units Unit[]

  @@map("ems_agencies")
}

model Unit {
  id              String   @id @default(cuid())
  agencyId        String?
  unitNumber      String
  type            String
  capabilities    String[]
  currentStatus   String   @default("AVAILABLE")
  currentLocation Json?
  isActive        Boolean  @default(true)

  // Trip assignment tracking
  assignedTripId     String?
  lastStatusUpdate   DateTime @default(now())
  statusHistory      Json? // Array of status changes with timestamps
  currentTripDetails Json? // Current trip information if assigned

  // Location tracking
  lastKnownLocation Json? // Last GPS coordinates
  locationUpdatedAt DateTime?

  // Performance metrics
  totalTripsCompleted Int       @default(0)
  averageResponseTime Float? // Average response time in minutes
  lastMaintenanceDate DateTime?

  // Additional fields (Added per audit report)
  maintenanceStatus       String?   @default("OPERATIONAL") // Unit maintenance status
  locationUpdateTimestamp DateTime? // When location was last updated
  performanceScore        Decimal?  @db.Decimal(5, 2) // Unit performance score

  // Crew Cost Management (Phase 1)
  crewSize           Int? // Number of crew members
  crewComposition    Json? // Array of crew roles and certifications
  baseHourlyRate     Decimal? @db.Decimal(8, 2) // Base crew cost per hour
  overtimeMultiplier Decimal? @db.Decimal(3, 2) // Overtime rate multiplier
  shiftLengthHours   Decimal? @db.Decimal(4, 2) // Standard shift length
  maxOvertimeHours   Decimal? @db.Decimal(4, 2) // Maximum overtime allowed

  // Operational Costs
  vehicleCostPerMile     Decimal? @db.Decimal(6, 2) // Vehicle operational cost per mile
  fuelCostPerMile        Decimal? @db.Decimal(6, 2) // Fuel cost per mile
  maintenanceCostPerMile Decimal? @db.Decimal(6, 2) // Maintenance cost per mile

  // Location & Staging
  homeBaseLocation    Json? // Home base coordinates
  stagingLocations    Json? // Array of staging locations
  maxServiceRadius    Decimal? @db.Decimal(6, 2) // Maximum service radius in miles
  interceptCapability Boolean  @default(false) // Can perform intercepts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agency EMSAgency? @relation(fields: [agencyId], references: [id])

  @@map("units")
}

model CrewRole {
  id                 String   @id @default(cuid())
  roleName           String // EMT, Paramedic, RN, CCT Specialist
  certificationLevel String // BLS, ALS, CCT, RN, etc.
  hourlyRate         Decimal  @db.Decimal(8, 2)
  overtimeMultiplier Decimal  @db.Decimal(3, 2)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("crew_roles")
}

model TransportRequest {
  id                    String    @id @default(cuid())
  tripNumber            String?   @unique
  patientId             String
  patientWeight         String?
  specialNeeds          String?
  originFacilityId      String?
  destinationFacilityId String?
  fromLocation          String?
  toLocation            String?
  scheduledTime         DateTime?
  transportLevel        String
  urgencyLevel          String?
  priority              String
  status                String    @default("PENDING")
  specialRequirements   String?

  // Clinical Details
  diagnosis          String?
  mobilityLevel      String?
  oxygenRequired     Boolean @default(false)
  monitoringRequired Boolean @default(false)

  // QR Code
  generateQRCode Boolean @default(false)
  qrCodeData     String?

  // Agency Notifications
  selectedAgencies   String[]
  notificationRadius Int?

  // Time Tracking
  transferRequestTime  DateTime?
  transferAcceptedTime DateTime?
  emsArrivalTime       DateTime?
  emsDepartureTime     DateTime?

  requestTimestamp    DateTime  @default(now())
  acceptedTimestamp   DateTime?
  pickupTimestamp     DateTime?
  completionTimestamp DateTime?
  assignedAgencyId    String?
  assignedUnitId      String?
  createdById         String?
  readyStart          DateTime?
  readyEnd            DateTime?
  isolation           Boolean   @default(false)
  bariatric           Boolean   @default(false)
  notes               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  createdBy EMSUser? @relation(fields: [createdById], references: [id])

  @@map("transport_requests")
}
