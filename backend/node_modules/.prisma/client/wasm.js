
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CenterUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  userType: 'userType',
  phone: 'phone',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthcareUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  facilityName: 'facilityName',
  facilityType: 'facilityType',
  userType: 'userType',
  isActive: 'isActive',
  manageMultipleLocations: 'manageMultipleLocations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthcareLocationScalarFieldEnum = {
  id: 'id',
  healthcareUserId: 'healthcareUserId',
  locationName: 'locationName',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  facilityType: 'facilityType',
  isActive: 'isActive',
  isPrimary: 'isPrimary',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HospitalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  email: 'email',
  type: 'type',
  capabilities: 'capabilities',
  region: 'region',
  coordinates: 'coordinates',
  latitude: 'latitude',
  longitude: 'longitude',
  operatingHours: 'operatingHours',
  isActive: 'isActive',
  requiresReview: 'requiresReview',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EMSUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  agencyName: 'agencyName',
  agencyId: 'agencyId',
  isActive: 'isActive',
  userType: 'userType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EMSAgencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  phone: 'phone',
  email: 'email',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  serviceArea: 'serviceArea',
  operatingHours: 'operatingHours',
  capabilities: 'capabilities',
  pricingStructure: 'pricingStructure',
  isActive: 'isActive',
  status: 'status',
  addedBy: 'addedBy',
  addedAt: 'addedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  acceptsNotifications: 'acceptsNotifications',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  availableUnits: 'availableUnits',
  lastUpdated: 'lastUpdated',
  latitude: 'latitude',
  longitude: 'longitude',
  notificationMethods: 'notificationMethods',
  requiresReview: 'requiresReview',
  serviceRadius: 'serviceRadius',
  totalUnits: 'totalUnits'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  tripNumber: 'tripNumber',
  patientId: 'patientId',
  patientWeight: 'patientWeight',
  specialNeeds: 'specialNeeds',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  scheduledTime: 'scheduledTime',
  transportLevel: 'transportLevel',
  urgencyLevel: 'urgencyLevel',
  diagnosis: 'diagnosis',
  mobilityLevel: 'mobilityLevel',
  oxygenRequired: 'oxygenRequired',
  monitoringRequired: 'monitoringRequired',
  generateQRCode: 'generateQRCode',
  qrCodeData: 'qrCodeData',
  selectedAgencies: 'selectedAgencies',
  notificationRadius: 'notificationRadius',
  transferRequestTime: 'transferRequestTime',
  transferAcceptedTime: 'transferAcceptedTime',
  emsArrivalTime: 'emsArrivalTime',
  emsDepartureTime: 'emsDepartureTime',
  actualStartTime: 'actualStartTime',
  actualEndTime: 'actualEndTime',
  status: 'status',
  priority: 'priority',
  notes: 'notes',
  assignedTo: 'assignedTo',
  assignedAgencyId: 'assignedAgencyId',
  assignedUnitId: 'assignedUnitId',
  acceptedTimestamp: 'acceptedTimestamp',
  pickupTimestamp: 'pickupTimestamp',
  completionTimestamp: 'completionTimestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  actualTripTimeMinutes: 'actualTripTimeMinutes',
  backhaulOpportunity: 'backhaulOpportunity',
  completionTimeMinutes: 'completionTimeMinutes',
  customerSatisfaction: 'customerSatisfaction',
  deadheadMiles: 'deadheadMiles',
  destinationLatitude: 'destinationLatitude',
  destinationLongitude: 'destinationLongitude',
  distanceMiles: 'distanceMiles',
  efficiency: 'efficiency',
  estimatedTripTimeMinutes: 'estimatedTripTimeMinutes',
  insuranceCompany: 'insuranceCompany',
  insurancePayRate: 'insurancePayRate',
  loadedMiles: 'loadedMiles',
  originLatitude: 'originLatitude',
  originLongitude: 'originLongitude',
  perMileRate: 'perMileRate',
  performanceScore: 'performanceScore',
  requestTimestamp: 'requestTimestamp',
  responseTimeMinutes: 'responseTimeMinutes',
  revenuePerHour: 'revenuePerHour',
  tripCost: 'tripCost',
  pickupLocationId: 'pickupLocationId',
  maxResponses: 'maxResponses',
  responseDeadline: 'responseDeadline',
  responseStatus: 'responseStatus',
  selectionMode: 'selectionMode'
};

exports.Prisma.AgencyResponseScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  agencyId: 'agencyId',
  response: 'response',
  responseTimestamp: 'responseTimestamp',
  responseNotes: 'responseNotes',
  estimatedArrival: 'estimatedArrival',
  isSelected: 'isSelected',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemAnalyticsScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  metricValue: 'metricValue',
  timestamp: 'timestamp',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.TripCostBreakdownScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  baseRevenue: 'baseRevenue',
  mileageRevenue: 'mileageRevenue',
  priorityRevenue: 'priorityRevenue',
  specialRequirementsRevenue: 'specialRequirementsRevenue',
  insuranceAdjustment: 'insuranceAdjustment',
  totalRevenue: 'totalRevenue',
  crewLaborCost: 'crewLaborCost',
  vehicleCost: 'vehicleCost',
  fuelCost: 'fuelCost',
  maintenanceCost: 'maintenanceCost',
  overheadCost: 'overheadCost',
  totalCost: 'totalCost',
  grossProfit: 'grossProfit',
  profitMargin: 'profitMargin',
  revenuePerMile: 'revenuePerMile',
  costPerMile: 'costPerMile',
  loadedMileRatio: 'loadedMileRatio',
  deadheadMileRatio: 'deadheadMileRatio',
  utilizationRate: 'utilizationRate',
  tripDistance: 'tripDistance',
  loadedMiles: 'loadedMiles',
  deadheadMiles: 'deadheadMiles',
  tripDurationHours: 'tripDurationHours',
  transportLevel: 'transportLevel',
  priorityLevel: 'priorityLevel',
  costCenterId: 'costCenterId',
  costCenterName: 'costCenterName',
  calculatedAt: 'calculatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CostCenterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  code: 'code',
  overheadRate: 'overheadRate',
  fixedCosts: 'fixedCosts',
  variableCosts: 'variableCosts',
  allocationMethod: 'allocationMethod',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Backhaul_opportunitiesScalarFieldEnum = {
  id: 'id',
  tripId1: 'tripId1',
  tripId2: 'tripId2',
  revenueBonus: 'revenueBonus',
  efficiency: 'efficiency',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.Pickup_locationsScalarFieldEnum = {
  id: 'id',
  hospitalId: 'hospitalId',
  name: 'name',
  description: 'description',
  contactPhone: 'contactPhone',
  contactEmail: 'contactEmail',
  floor: 'floor',
  room: 'room',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Pricing_modelsScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  name: 'name',
  isActive: 'isActive',
  baseRates: 'baseRates',
  perMileRates: 'perMileRates',
  priorityMultipliers: 'priorityMultipliers',
  peakHourMultipliers: 'peakHourMultipliers',
  weekendMultipliers: 'weekendMultipliers',
  seasonalMultipliers: 'seasonalMultipliers',
  zoneMultipliers: 'zoneMultipliers',
  distanceTiers: 'distanceTiers',
  specialRequirements: 'specialRequirements',
  isolationPricing: 'isolationPricing',
  bariatricPricing: 'bariatricPricing',
  oxygenPricing: 'oxygenPricing',
  monitoringPricing: 'monitoringPricing',
  insuranceRates: 'insuranceRates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Route_optimization_settingsScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  deadheadMileWeight: 'deadheadMileWeight',
  waitTimeWeight: 'waitTimeWeight',
  backhaulBonusWeight: 'backhaulBonusWeight',
  overtimeRiskWeight: 'overtimeRiskWeight',
  revenueWeight: 'revenueWeight',
  maxDeadheadMiles: 'maxDeadheadMiles',
  maxWaitTimeMinutes: 'maxWaitTimeMinutes',
  maxOvertimeHours: 'maxOvertimeHours',
  maxResponseTimeMinutes: 'maxResponseTimeMinutes',
  maxServiceDistance: 'maxServiceDistance',
  backhaulTimeWindow: 'backhaulTimeWindow',
  backhaulDistanceLimit: 'backhaulDistanceLimit',
  backhaulRevenueBonus: 'backhaulRevenueBonus',
  enableBackhaulOptimization: 'enableBackhaulOptimization',
  targetLoadedMileRatio: 'targetLoadedMileRatio',
  targetRevenuePerHour: 'targetRevenuePerHour',
  targetResponseTime: 'targetResponseTime',
  targetEfficiency: 'targetEfficiency',
  optimizationAlgorithm: 'optimizationAlgorithm',
  maxOptimizationTime: 'maxOptimizationTime',
  enableRealTimeOptimization: 'enableRealTimeOptimization',
  crewAvailabilityWeight: 'crewAvailabilityWeight',
  equipmentCompatibilityWeight: 'equipmentCompatibilityWeight',
  patientPriorityWeight: 'patientPriorityWeight',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  unitNumber: 'unitNumber',
  type: 'type',
  status: 'status',
  currentStatus: 'currentStatus',
  currentLocation: 'currentLocation',
  capabilities: 'capabilities',
  crewSize: 'crewSize',
  equipment: 'equipment',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  lastMaintenance: 'lastMaintenance',
  nextMaintenance: 'nextMaintenance',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Unit_analyticsScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  performanceScore: 'performanceScore',
  efficiency: 'efficiency',
  totalTrips: 'totalTrips',
  totalTripsCompleted: 'totalTripsCompleted',
  averageResponseTime: 'averageResponseTime',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationType: 'notificationType',
  emailEnabled: 'emailEnabled',
  smsEnabled: 'smsEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  notificationType: 'notificationType',
  channel: 'channel',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  errorMessage: 'errorMessage'
};

exports.Prisma.DropdownOptionScalarFieldEnum = {
  id: 'id',
  category: 'category',
  value: 'value',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryDefaultScalarFieldEnum = {
  id: 'id',
  category: 'category',
  optionId: 'optionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransportRequestScalarFieldEnum = {
  id: 'id',
  tripNumber: 'tripNumber',
  patientId: 'patientId',
  patientWeight: 'patientWeight',
  specialNeeds: 'specialNeeds',
  originFacilityId: 'originFacilityId',
  destinationFacilityId: 'destinationFacilityId',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  fromLocationId: 'fromLocationId',
  isMultiLocationFacility: 'isMultiLocationFacility',
  scheduledTime: 'scheduledTime',
  transportLevel: 'transportLevel',
  urgencyLevel: 'urgencyLevel',
  priority: 'priority',
  status: 'status',
  specialRequirements: 'specialRequirements',
  diagnosis: 'diagnosis',
  mobilityLevel: 'mobilityLevel',
  oxygenRequired: 'oxygenRequired',
  monitoringRequired: 'monitoringRequired',
  generateQRCode: 'generateQRCode',
  qrCodeData: 'qrCodeData',
  selectedAgencies: 'selectedAgencies',
  notificationRadius: 'notificationRadius',
  requestTimestamp: 'requestTimestamp',
  acceptedTimestamp: 'acceptedTimestamp',
  pickupTimestamp: 'pickupTimestamp',
  arrivalTimestamp: 'arrivalTimestamp',
  departureTimestamp: 'departureTimestamp',
  completionTimestamp: 'completionTimestamp',
  pickupLocationId: 'pickupLocationId',
  assignedAgencyId: 'assignedAgencyId',
  assignedUnitId: 'assignedUnitId',
  createdById: 'createdById',
  healthcareCreatedById: 'healthcareCreatedById',
  isolation: 'isolation',
  bariatric: 'bariatric',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FacilityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  phone: 'phone',
  email: 'email',
  type: 'type',
  capabilities: 'capabilities',
  region: 'region',
  coordinates: 'coordinates',
  latitude: 'latitude',
  longitude: 'longitude',
  operatingHours: 'operatingHours',
  isActive: 'isActive',
  requiresReview: 'requiresReview',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  CenterUser: 'CenterUser',
  HealthcareUser: 'HealthcareUser',
  HealthcareLocation: 'HealthcareLocation',
  Hospital: 'Hospital',
  EMSUser: 'EMSUser',
  EMSAgency: 'EMSAgency',
  Trip: 'Trip',
  AgencyResponse: 'AgencyResponse',
  SystemAnalytics: 'SystemAnalytics',
  TripCostBreakdown: 'TripCostBreakdown',
  CostCenter: 'CostCenter',
  backhaul_opportunities: 'backhaul_opportunities',
  pickup_locations: 'pickup_locations',
  pricing_models: 'pricing_models',
  route_optimization_settings: 'route_optimization_settings',
  Unit: 'Unit',
  unit_analytics: 'unit_analytics',
  NotificationPreference: 'NotificationPreference',
  NotificationLog: 'NotificationLog',
  DropdownOption: 'DropdownOption',
  CategoryDefault: 'CategoryDefault',
  TransportRequest: 'TransportRequest',
  Facility: 'Facility'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
