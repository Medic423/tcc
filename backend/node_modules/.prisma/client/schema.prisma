generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CenterUser {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  password                String
  name                    String
  userType                String
  phone                   String?
  emailNotifications      Boolean                  @default(true)
  smsNotifications        Boolean                  @default(false)
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  notificationLogs        NotificationLog[]
  notificationPreferences NotificationPreference[]

  @@map("center_users")
}

model HealthcareUser {
  id                      String   @id @default(cuid())
  email                   String   @unique
  password                String
  name                    String
  facilityName            String
  facilityType            String
  userType                String   @default("HEALTHCARE")
  isActive                Boolean  @default(true)
  manageMultipleLocations Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  locations HealthcareLocation[]

  @@map("healthcare_users")
}

model HealthcareLocation {
  id               String   @id @default(cuid())
  healthcareUserId String
  locationName     String
  address          String
  city             String
  state            String
  zipCode          String
  phone            String?
  facilityType     String
  isActive         Boolean  @default(true)
  isPrimary        Boolean  @default(false)
  latitude         Float? // ✅ NEW: GPS coordinates
  longitude        Float? // ✅ NEW: GPS coordinates
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  healthcareUser    HealthcareUser     @relation(fields: [healthcareUserId], references: [id], onDelete: Cascade)
  transportRequests TransportRequest[]

  @@index([healthcareUserId])
  @@index([isActive])
  @@map("healthcare_locations")
}

model Hospital {
  id             String    @id @default(cuid())
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  type           String
  capabilities   String[]
  region         String
  coordinates    Json?
  latitude       Float?
  longitude      Float?
  operatingHours String?
  isActive       Boolean   @default(true)
  requiresReview Boolean   @default(false)
  approvedAt     DateTime?
  approvedBy     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // pickup_locations pickup_locations[] // Removed relation since pickup_locations can reference healthcare locations

  @@map("hospitals")
}

model EMSUser {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  agencyName String
  agencyId   String? // Reference to EMSAgency
  isActive   Boolean  @default(true)
  userType   String   @default("EMS") // EMS, ADMIN
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  agency EMSAgency? @relation(fields: [agencyId], references: [id])

  @@map("ems_users")
}

model EMSAgency {
  id                   String    @id @default(cuid())
  name                 String
  contactName          String
  phone                String
  email                String
  address              String
  city                 String
  state                String
  zipCode              String
  serviceArea          String[]
  operatingHours       Json?
  capabilities         String[]
  pricingStructure     Json?
  isActive             Boolean   @default(true)
  status               String    @default("ACTIVE")
  addedBy              String? // Missing field that was causing errors
  addedAt              DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  acceptsNotifications Boolean   @default(true)
  approvedAt           DateTime?
  approvedBy           String?
  availableUnits       Int       @default(0)
  lastUpdated          DateTime  @default(now())
  latitude             Float?
  longitude            Float?
  notificationMethods  String[]
  requiresReview       Boolean   @default(false)
  serviceRadius        Int?
  totalUnits           Int       @default(0)
  units                Unit[]
  users                EMSUser[]

  @@map("ems_agencies")
}

model Trip {
  id                       String            @id @default(cuid())
  tripNumber               String            @unique
  patientId                String
  patientWeight            String?
  specialNeeds             String?
  fromLocation             String
  toLocation               String
  scheduledTime            DateTime
  transportLevel           String
  urgencyLevel             String
  diagnosis                String?
  mobilityLevel            String?
  oxygenRequired           Boolean           @default(false)
  monitoringRequired       Boolean           @default(false)
  generateQRCode           Boolean           @default(false)
  qrCodeData               String?
  selectedAgencies         String[]
  notificationRadius       Int?
  transferRequestTime      DateTime?
  transferAcceptedTime     DateTime?
  emsArrivalTime           DateTime?
  emsDepartureTime         DateTime?
  actualStartTime          DateTime?
  actualEndTime            DateTime?
  status                   String
  priority                 String
  notes                    String?
  assignedTo               String?
  assignedAgencyId         String?
  assignedUnitId           String?
  acceptedTimestamp        DateTime?
  pickupTimestamp          DateTime?
  completionTimestamp      DateTime?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  actualTripTimeMinutes    Int?
  backhaulOpportunity      Boolean           @default(false)
  completionTimeMinutes    Int?
  customerSatisfaction     Int?
  deadheadMiles            Float?
  destinationLatitude      Float?
  destinationLongitude     Float?
  distanceMiles            Float?
  efficiency               Decimal?          @db.Decimal(5, 2)
  estimatedTripTimeMinutes Int?
  insuranceCompany         String?
  insurancePayRate         Decimal?          @db.Decimal(10, 2)
  loadedMiles              Decimal?          @db.Decimal(10, 2)
  originLatitude           Float?
  originLongitude          Float?
  perMileRate              Decimal?          @db.Decimal(8, 2)
  performanceScore         Decimal?          @db.Decimal(5, 2)
  requestTimestamp         DateTime?         @default(now())
  responseTimeMinutes      Int?
  revenuePerHour           Decimal?          @db.Decimal(10, 2)
  tripCost                 Decimal?          @db.Decimal(10, 2)
  pickupLocationId         String?
  maxResponses             Int               @default(5)
  responseDeadline         DateTime?
  responseStatus           String            @default("PENDING")
  selectionMode            String            @default("SPECIFIC_AGENCIES")
  agencyResponses          AgencyResponse[]
  pickup_locations         pickup_locations? @relation(fields: [pickupLocationId], references: [id])

  @@map("trips")
}

model AgencyResponse {
  id                String    @id @default(cuid())
  tripId            String
  agencyId          String
  response          String
  responseTimestamp DateTime  @default(now())
  responseNotes     String?
  estimatedArrival  DateTime?
  isSelected        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  trip              Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("agency_responses")
}

model SystemAnalytics {
  id          String   @id @default(cuid())
  metricName  String
  metricValue Json
  timestamp   DateTime @default(now())
  userId      String?
  createdAt   DateTime @default(now())

  @@map("system_analytics")
}

model TripCostBreakdown {
  id                         String   @id @default(cuid())
  tripId                     String
  baseRevenue                Decimal  @db.Decimal(10, 2)
  mileageRevenue             Decimal  @db.Decimal(10, 2)
  priorityRevenue            Decimal  @db.Decimal(10, 2)
  specialRequirementsRevenue Decimal  @db.Decimal(10, 2)
  insuranceAdjustment        Decimal  @db.Decimal(10, 2)
  totalRevenue               Decimal  @db.Decimal(10, 2)
  crewLaborCost              Decimal  @db.Decimal(10, 2)
  vehicleCost                Decimal  @db.Decimal(10, 2)
  fuelCost                   Decimal  @db.Decimal(10, 2)
  maintenanceCost            Decimal  @db.Decimal(10, 2)
  overheadCost               Decimal  @db.Decimal(10, 2)
  totalCost                  Decimal  @db.Decimal(10, 2)
  grossProfit                Decimal  @db.Decimal(10, 2)
  profitMargin               Decimal  @db.Decimal(5, 2)
  revenuePerMile             Decimal  @db.Decimal(8, 2)
  costPerMile                Decimal  @db.Decimal(8, 2)
  loadedMileRatio            Decimal  @db.Decimal(3, 2)
  deadheadMileRatio          Decimal  @db.Decimal(3, 2)
  utilizationRate            Decimal  @db.Decimal(3, 2)
  tripDistance               Decimal  @db.Decimal(6, 2)
  loadedMiles                Decimal  @db.Decimal(6, 2)
  deadheadMiles              Decimal  @db.Decimal(6, 2)
  tripDurationHours          Decimal  @db.Decimal(4, 2)
  transportLevel             String
  priorityLevel              String
  costCenterId               String?
  costCenterName             String?
  calculatedAt               DateTime @default(now())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@map("trip_cost_breakdowns")
}

model CostCenter {
  id               String   @id @default(cuid())
  name             String
  description      String?
  code             String   @unique
  overheadRate     Decimal  @default(0.0) @db.Decimal(5, 2)
  fixedCosts       Decimal  @default(0.0) @db.Decimal(10, 2)
  variableCosts    Decimal  @default(0.0) @db.Decimal(10, 2)
  allocationMethod String   @default("TRIP_COUNT")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("cost_centers")
}

model backhaul_opportunities {
  id           String   @id
  tripId1      String
  tripId2      String
  revenueBonus Decimal? @db.Decimal(10, 2)
  efficiency   Decimal? @db.Decimal(5, 2)
  createdAt    DateTime @default(now())
  isActive     Boolean  @default(true)
}

model pickup_locations {
  id           String             @id
  hospitalId   String // Can reference either Hospital.id or HealthcareLocation.id
  name         String
  description  String?
  contactPhone String?
  contactEmail String?
  floor        String?
  room         String?
  isActive     Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  // Note: hospitalId can reference either Hospital or HealthcareLocation
  // We handle this in the application logic since Prisma doesn't support
  // conditional foreign keys. No database-level foreign key constraint.
  trips        TransportRequest[]
  legacyTrips  Trip[]
}

model pricing_models {
  id                  String   @id
  agencyId            String?
  name                String
  isActive            Boolean  @default(true)
  baseRates           Json
  perMileRates        Json
  priorityMultipliers Json
  peakHourMultipliers Json
  weekendMultipliers  Json
  seasonalMultipliers Json
  zoneMultipliers     Json
  distanceTiers       Json
  specialRequirements Json
  isolationPricing    Decimal? @db.Decimal(8, 2)
  bariatricPricing    Decimal? @db.Decimal(8, 2)
  oxygenPricing       Decimal? @db.Decimal(8, 2)
  monitoringPricing   Decimal? @db.Decimal(8, 2)
  insuranceRates      Json
  createdAt           DateTime @default(now())
  updatedAt           DateTime
}

model route_optimization_settings {
  id                           String   @id
  agencyId                     String?
  deadheadMileWeight           Decimal  @default(1.0) @db.Decimal(5, 2)
  waitTimeWeight               Decimal  @default(1.0) @db.Decimal(5, 2)
  backhaulBonusWeight          Decimal  @default(1.0) @db.Decimal(5, 2)
  overtimeRiskWeight           Decimal  @default(1.0) @db.Decimal(5, 2)
  revenueWeight                Decimal  @default(1.0) @db.Decimal(5, 2)
  maxDeadheadMiles             Decimal  @default(50.0) @db.Decimal(6, 2)
  maxWaitTimeMinutes           Int      @default(30)
  maxOvertimeHours             Decimal  @default(4.0) @db.Decimal(4, 2)
  maxResponseTimeMinutes       Int      @default(15)
  maxServiceDistance           Decimal  @default(100.0) @db.Decimal(6, 2)
  backhaulTimeWindow           Int      @default(60)
  backhaulDistanceLimit        Decimal  @default(25.0) @db.Decimal(6, 2)
  backhaulRevenueBonus         Decimal  @default(50.0) @db.Decimal(8, 2)
  enableBackhaulOptimization   Boolean  @default(true)
  targetLoadedMileRatio        Decimal  @default(0.75) @db.Decimal(3, 2)
  targetRevenuePerHour         Decimal  @default(200.0) @db.Decimal(8, 2)
  targetResponseTime           Int      @default(12)
  targetEfficiency             Decimal  @default(0.85) @db.Decimal(3, 2)
  optimizationAlgorithm        String   @default("HYBRID")
  maxOptimizationTime          Int      @default(30)
  enableRealTimeOptimization   Boolean  @default(true)
  crewAvailabilityWeight       Decimal  @default(1.0) @db.Decimal(5, 2)
  equipmentCompatibilityWeight Decimal  @default(1.0) @db.Decimal(5, 2)
  patientPriorityWeight        Decimal  @default(1.0) @db.Decimal(5, 2)
  isActive                     Boolean  @default(true)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime
}

model Unit {
  id              String             @id @default(cuid())
  agencyId        String
  unitNumber      String
  type            String
  status          String             @default("AVAILABLE")
  currentStatus   String             @default("AVAILABLE")
  currentLocation String?
  capabilities    String[]
  crewSize        Int                @default(2)
  equipment       String[]
  location        Json?
  latitude        Float?
  longitude       Float?
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  analytics       unit_analytics?
  agency          EMSAgency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  assignedTrips   TransportRequest[]

  @@unique([agencyId, unitNumber])
  @@map("units")
}

model unit_analytics {
  id                  String   @id
  unitId              String   @unique
  performanceScore    Decimal? @db.Decimal(5, 2)
  efficiency          Decimal? @db.Decimal(5, 2)
  totalTrips          Int      @default(0)
  totalTripsCompleted Int      @default(0)
  averageResponseTime Decimal? @db.Decimal(5, 2)
  // totalRevenue        Decimal? @db.Decimal(12, 2)  // Commented out - complex financial tracking
  // totalCosts          Decimal? @db.Decimal(12, 2)  // Commented out - complex financial tracking
  // profitMargin        Decimal? @db.Decimal(5, 2)   // Commented out - complex financial tracking
  lastUpdated         DateTime @default(now())
  unit                Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("unit_analytics")
}

model NotificationPreference {
  id               String     @id @default(cuid())
  userId           String
  notificationType String
  emailEnabled     Boolean    @default(true)
  smsEnabled       Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  user             CenterUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@map("notification_preferences")
}

model NotificationLog {
  id               String     @id @default(cuid())
  userId           String
  notificationType String
  channel          String
  status           String
  sentAt           DateTime   @default(now())
  deliveredAt      DateTime?
  errorMessage     String?
  user             CenterUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}

model DropdownOption {
  id         String           @id @default(cuid())
  category   String
  value      String
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  defaultFor CategoryDefault?

  @@unique([category, value])
  @@map("dropdown_options")
}

model CategoryDefault {
  id        String         @id @default(cuid())
  category  String         @unique
  optionId  String         @unique
  option    DropdownOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("dropdown_category_defaults")
}

model TransportRequest {
  id                      String    @id @default(cuid())
  tripNumber              String?   @unique
  patientId               String
  patientWeight           String?
  specialNeeds            String?
  originFacilityId        String?
  destinationFacilityId   String?
  fromLocation            String?
  toLocation              String?
  fromLocationId          String? // ✅ Reference to HealthcareLocation
  isMultiLocationFacility Boolean   @default(false) // ✅ Analytics flag
  scheduledTime           DateTime?
  transportLevel          String
  urgencyLevel            String?
  priority                String
  status                  String    @default("PENDING")
  specialRequirements     String?
  diagnosis               String?
  mobilityLevel           String?
  oxygenRequired          Boolean   @default(false)
  monitoringRequired      Boolean   @default(false)
  generateQRCode          Boolean   @default(false)
  qrCodeData              String?
  selectedAgencies        String[]
  notificationRadius      Int?
  // transferRequestTime   DateTime?               // Commented out - complex tracking
  // transferAcceptedTime  DateTime?              // Commented out - complex tracking  
  // emsArrivalTime        DateTime?              // Commented out - complex tracking
  // emsDepartureTime      DateTime?              // Commented out - complex tracking
  requestTimestamp        DateTime  @default(now()) // ✅ Time trip was saved by hospital
  acceptedTimestamp       DateTime? // ✅ Time trip was accepted by EMS
  pickupTimestamp         DateTime? // ✅ Time patient is ready for pickup
  arrivalTimestamp        DateTime? // ✅ Time unit arrives at hospital
  departureTimestamp      DateTime? // ✅ Time unit departs from hospital
  completionTimestamp     DateTime? // ✅ Time trip is completed
  pickupLocationId        String? // ✅ Pickup location reference
  assignedAgencyId        String?
  assignedUnitId          String?
  createdById             String?
  healthcareCreatedById   String?
  // readyStart            DateTime?             // Commented out - complex tracking
  // readyEnd              DateTime?             // Commented out - complex tracking
  isolation               Boolean   @default(false)
  bariatric               Boolean   @default(false)
  notes                   String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relationships
  originFacility      Facility?           @relation("OriginFacility", fields: [originFacilityId], references: [id])
  destinationFacility Facility?           @relation("DestinationFacility", fields: [destinationFacilityId], references: [id])
  pickupLocation      pickup_locations?   @relation(fields: [pickupLocationId], references: [id])
  assignedUnit        Unit?               @relation(fields: [assignedUnitId], references: [id])
  healthcareLocation  HealthcareLocation? @relation(fields: [fromLocationId], references: [id], onDelete: SetNull)

  @@index([fromLocationId])
  @@index([isMultiLocationFacility])
  @@map("transport_requests")
}

model Facility {
  id             String    @id @default(cuid())
  name           String
  address        String
  city           String
  state          String
  zipCode        String
  phone          String?
  email          String?
  type           String
  capabilities   String[]
  region         String
  coordinates    Json?
  latitude       Float?
  longitude      Float?
  operatingHours String?
  isActive       Boolean   @default(true)
  requiresReview Boolean   @default(false)
  approvedAt     DateTime?
  approvedBy     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  originTrips      TransportRequest[] @relation("OriginFacility")
  destinationTrips TransportRequest[] @relation("DestinationFacility")

  @@map("facilities")
}
